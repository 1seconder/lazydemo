package com.newenv.communityFocus.services;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.apache.commons.lang3.StringUtils;
import org.nutz.dao.entity.Record;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.alibaba.fastjson.JSON;
import com.newenv.communityFocus.base.BaseService;
import com.newenv.communityFocus.dao.CommonDao;
import com.newenv.communityFocus.dao.DaoHelper;
import com.newenv.communityFocus.domain.RangePlateStatistic;
import com.newenv.communityFocus.domain.RequestParameter;
import com.newenv.communityFocus.domain.TableConstants;
import com.newenv.communityFocus.domain.page.PageInfo;
import com.newenv.communityFocus.security.services.SecurityUserHolder;
import com.newenv.communityFocus.stastistic.manager.FzManager;
import com.newenv.communityFocus.stastistic.manager.SqManager;

@Component
@Path("/assignService")
public class AssignService extends BaseService {

	@Autowired
	private DaoHelper daoHelper;
	@Autowired
	private CommonDao commonDao;
	
	
	@POST
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Path("/query")
	public Response query(RequestParameter parameter) {
		int deptId = SecurityUserHolder.getDeptId();
		try {
			StringBuffer sql = new StringBuffer();
//			String sql = "SELECT dept1_id ,dept1_name department_name FROM view_alldepartment   WHERE dept2_id=(SELECT tbl_department_id FROM tbl_user_profile WHERE tbl_title = 210180)";
			sql.append(" SELECT dept1_id,department_name,fullname , tbl_user_profile_id jjrid, SUM(CASE WHEN b.id IS NULL THEN 0 ELSE 1 END) assnum,count(1) fjtotal,DATE_FORMAT(MAX(b.createdate),'%Y-%m-%d %H:%i:%s') lasttime   ");
					sql.append("  FROM  ");
					sql.append("  ( ");
					sql.append("  SELECT dept1_id ,dept1_name department_name,v.fullname,tbl_user_profile_id ");
					sql.append("  FROM view_loginxinxi v  , view_alldepartment v2 ");
					sql.append("  WHERE v.tbl_department_id = v2.dept1_id  ");
//					sql.append("  AND  dept2_id= (SELECT tbl_department_id FROM tbl_user_profile WHERE tbl_title = 210180) ");//商圈经理所在部门
					sql.append("  AND  dept2_id= "+deptId );//商圈经理所在部门
					if(parameter.getMdId() != null && "0".equals(parameter.getMdId())){
						sql.append(" and dept1_id = " + parameter.getMdId());
					}
					if(parameter.getJjrId() != null && "0".equals(parameter.getJjrId())){
						sql.append(" and tbl_user_profile_id = " + parameter.getJjrId());
					}
					sql.append("  ) a LEFT JOIN lpjg_assignment_room b ON a.tbl_user_profile_id = b.userid   ");
//					sql.append("  where                ");
					sql.append(" GROUP BY dept1_id,department_name,fullname  ORDER BY  SUM(CASE WHEN b.id IS NULL THEN 0 ELSE 1 END)  ASC    ");
			PageInfo pageInfo = parameter.getPageInfo();
			if(pageInfo == null){
				pageInfo = new PageInfo();
				pageInfo.setPage(1);
				pageInfo.setRows(10);
			} 
			pageInfo = super.getPagerjdo(sql.toString(),sql.toString(), pageInfo);
			String jsonString = JSON.toJSONString(pageInfo);
			return Response.ok().entity(jsonString).build();
		}
		catch (Exception e) {
			e.printStackTrace();
			return Response.status(500).build();
		}

	}
	
	@POST
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Path("/queryLog")
	public Response queryLog(RequestParameter parameter) {
		System.out.println("username--"+SecurityUserHolder.getUserName());
		System.out.println("deptid--"+SecurityUserHolder.getDeptId());
		System.out.println("userid--"+SecurityUserHolder.getUserId());
		try {
			String sql = "SELECT id , (SELECT fullname FROM tbl_user_profile WHERE id = l.operatorid )operator ,"
					+ " (SELECT d.department_name FROM tbl_user_profile t,tbl_department d WHERE t.id = l.operatorid  and t.tbl_department_id=d.id)bm , bmid ,message,  "
					+ " DATE_FORMAT(operatedate,'%Y-%m-%d %H:%i:%s') operatedate FROM  lpjg_operation_log l ORDER BY operatedate DESC ";
			
			PageInfo pageInfo = parameter.getPageInfo();
			if(pageInfo == null){
				pageInfo = new PageInfo();
				pageInfo.setPage(1);
				pageInfo.setRows(10);
			}
			pageInfo = super.getPagerjdo(sql,sql, pageInfo);
			String jsonString = JSON.toJSONString(pageInfo);
			return Response.ok().entity(jsonString).build();
		}
		catch (Exception e) {
			e.printStackTrace();
			return Response.status(500).build();
		}

	}
	
	/**
	 * 查询已分派的楼盘
	 */
	@POST
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Path("/selectLp/{cityid}")
	public Response selectLp(@PathParam("cityid") String cityid) {
		List<Record> list = new ArrayList<Record>();
		int sqJlDeptId = SecurityUserHolder.getDeptId(); 
		try {
			list = daoHelper.getRecordList("  SELECT l.id, l.lp_name lpname FROM xhj_lpxx l , lpjg_assignment_loupan p "
					+ "	WHERE p.lpid = l.id  AND  p.mdid = "+ sqJlDeptId );
			return Response.ok().entity(list).build();
		}
		catch (Exception e) {
			e.printStackTrace();
			return Response.status(500).build();
		}
	}
	
	/**
	 * 
	 */
	@GET
	@Produces("text/html")
	@Path("/fenpai/{type}")
	public void operRecord(@PathParam("type") int typeId) {
		int loginDeptid  = SecurityUserHolder.getDeptId();
		int cityId = 1;
		if(!StringUtils.isEmpty(SecurityUserHolder.getUserLogin().getCityId())){
			cityId = SecurityUserHolder.getUserLogin().getDepartment().getCityId();
		}
		
		StringBuffer buff = new StringBuffer();
		buff.append("SELECT DISTINCT prfl.id,dpt.id loginDeptid, prfl.fullname, prfl.tel,  prfl.join_time, prfl.identityCode ");
		buff.append("	  ,ulogin.username,dpt.department_name, ttl.title_name, prfl.group_phone                  ");
		buff.append("	  FROM tbl_user_profile prfl, tbl_user_login ulogin, tbl_department dpt, tbl_title ttl    ");
		buff.append("	  WHERE ulogin.tbl_User_profile_id=prfl.id                                                ");
		buff.append("	  AND prfl.tbl_department_id=dpt.id AND prfl.tbl_Title=ttl.id      ");
		buff.append("	  AND ulogin.status=1 AND prfl.checked!=0       ");
		buff.append("	  AND prfl.checked!=2 AND dpt.flag=1 ");
		buff.append("  AND dpt.CityID=    "+ cityId);
		// sql.append(" AND title_name LIKE '%市场副总经理%' ");
		StringBuffer appendCnd = new StringBuffer();
		if (typeId == 1) {
			appendCnd.append(" AND title_name LIKE '%门店%'   ");
//			List<Record> rl = daoHelper.getRecordList(buff + appendCnd.toString() );
			appendCnd.delete(0, appendCnd.length());
			appendCnd.append(" AND title_name LIKE '%经纪人%' ");
			List<Record> jjr = daoHelper.getRecordList(buff + appendCnd.toString());
			
			
			String sql = "  SELECT  dept1_id id ,dept1_name department_name FROM view_alldepartment v WHERE v.dept2_id = "+loginDeptid +"";
			List<Record> rl = daoHelper.getRecordList(sql);
			super.setRequestAttribute("rl", rl);
			super.setRequestAttribute("jjr", jjr);
			super.setRequestAttribute("stat", SqManager.getInstance().statistic(daoHelper, loginDeptid));
			super.forwardTo("/pages/fenpai/fenpai_zuduipan.jsp");
			
		} else if (typeId == 2) {
			appendCnd.append(" AND title_name LIKE '%门店%'   ");
			List<Record> md = daoHelper.getRecordList(buff + appendCnd.toString() );
			super.setRequestAttribute("md", md);
			appendCnd.delete(0, appendCnd.length());
			appendCnd.append(" AND dpt.parent_ID =  "+ loginDeptid);
//			List<Record> jl = daoHelper.getRecordList(buff + appendCnd.toString());
			List<Record> jl = daoHelper.getRecordList(" SELECT  dept3_id id , dept3_name department_name FROM view_alldepartment  WHERE dept4_id ="+ loginDeptid + " GROUP BY dept3_id ,dept3_name ");
			super.setRequestAttribute("jl", jl);
			List qyList = commonDao.getQuyuByCityId(cityId);
			super.setRequestAttribute("qylist", commonDao.getQuyuByCityId(cityId));
			int qyId = (Integer)((Record)qyList.get(0)).get("id");
			super.setRequestAttribute("sqlist", commonDao.getSqByQyId(qyId));
			
			
			//按盘分派：
			super.setRequestAttribute("lplist", commonDao.getLpBySqId(qyId));
			super.setRequestAttribute("mdlist", commonDao.getLpBySqId(qyId));
			
//			String tmpSql = "SELECT count(DISTINCT tbl_department_id)    FROM view_loginxinxi  v WHERE  v.parent_id IN (SELECT tbl_department_id FROM view_loginxinxi WHERE parent_id ="+ loginDeptid + ")";
//			Map mdNum = daoHelper.getItem(tmpSql);
//			super.setRequestAttribute("mdNum", mdNum);
			
			
			RangePlateStatistic bean = FzManager.getInstance().statistic(daoHelper,loginDeptid);
			super.setRequestAttribute("stat", bean);
//			super.setRequestAttribute("headMessage", SqManager.getInstance().statistic(daoHelper, loginDeptid));
			
			super.forwardTo("/pages/fenpai/fenpai_zuyinpan.jsp");
		 	
		   
		} else if (typeId == 3) {
			buff.append("	  AND title_name = '市场副总经理'   ");
			List<Record> rl = daoHelper.getRecordList(buff.toString());
			// NutMap map = (NutMap) Mapl.maplistToObj(rl, NutMap.class);
			super.setRequestAttribute("rl", rl);
			super.forwardTo("/pages/fenpai/fenpai_zerenpan.jsp");
		}
	}

	
	@POST
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Path("/saveFenPai/{type}/{jjrid}/{fhid}")
	public Response saveFenPai(@PathParam("type") int type,@PathParam("jjrid") int jjrid,@PathParam("fhid") String fhid) {
		List<Record> list = new ArrayList<Record>();
		try {
			//商圈分派--经纪人--房号
			String [] fhs = fhid.split("\\,");
			Map fhMap = new HashMap();
			if(fhs.length > 0){
				String s = " SELECT f.id fhid ,dy.id dyid , d.id dzid ,l.id lpid   FROM xhj_lpfanghao f  LEFT JOIN xhj_lpdanyuan dy  ON f.dyid =dy.id  "
							+ " LEFT JOIN xhj_lpdong d  ON  d.id = dy.dzid  "
							+ " LEFT JOIN xhj_lpxx  l  ON l.id = d.lpid  WHERE  f.id IN   (" + fhid + ")";
				List<Record> fhList = daoHelper.getRecordList(s);
				for(Record r : fhList){
					fhMap.put(r.get("fhid"), r);
				}
			}
			for(String fh : fhs){
				Map jjrDept = daoHelper.getItem("select tbl_department_id  deptid from view_loginxinxi where tbl_user_profile_id ="+jjrid);
				int bmid = (Integer) jjrDept.get("deptid");
				Record  r =  new Record();
				r.set(".table", TableConstants.ASSIGIN_FANGHAO2JJR);
				r.set("cityid ", SecurityUserHolder.getCityId());
				r.set("userid", jjrid);
				r.set("fhid", fh);
				r.set("flag", 1);
				r.set("bmid", bmid);
				r.set("lpid", fhMap.get("lpid"));
				r.set("dzid", fhMap.get("dzid"));
				r.set("dyid", fhMap.get("dyid"));
				daoHelper.save(r);
				
				Record  r2 =  new Record();
				r2.set(".table", TableConstants.ASSIGIN_OPERATION_LOG);
				r2.set("operatorid", jjrid);
				r2.set("bmid", bmid);
				r2.set("message", "分配房号"+fhid+"给经纪人"+jjrid);
				r2.set("fhid", fh);
				r2.set("type", 0);
				daoHelper.save(r2);
			}
			return Response.ok().entity(list).build();
		}
		catch (Exception e) {
			e.printStackTrace();
			return Response.status(500).build();
		}
	}

	@POST
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Path("/refreshHeadMessage")
	public Response refreshHeadMessage() {
		int loginDeptid  = SecurityUserHolder.getDeptId();
		HashMap<String,Object> hashMap = new HashMap<String,Object>();
		hashMap.put("headMessage", SqManager.getInstance().statistic(daoHelper, loginDeptid));
		hashMap.put("headMessage1", FzManager.getInstance().statistic(daoHelper, loginDeptid));
		return Response.ok().entity(hashMap).build();
	}

	@GET
	@Produces("text/html")
	//@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Path("/queryAssignedJjr/{jjrid}")
	public Response queryAssignedByPan2(@PathParam("jjrid") int jjrid) {
		List<Record> list = new ArrayList<Record>(); 
		try {
			list = daoHelper.getRecordList(" SELECT distinct p.id ,p.lp_name lpname  FROM lpjg_assignment_room l , xhj_lpxx p where l.lpid = p.id  AND  l.lpid ="+ jjrid);
			return Response.ok().entity(list).build();
		}
		catch (Exception e) {
			return Response.status(500).build();
		}
	}
}
