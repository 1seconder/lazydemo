package com.newenv.communityFocus.configuration;

import java.beans.PropertyVetoException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletException;
import javax.ws.rs.Path;
import javax.ws.rs.ext.Provider;

import org.apache.catalina.Context;
import org.apache.catalina.Globals;
import org.apache.catalina.startup.Tomcat;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.cxf.bus.spring.SpringBus;
import org.apache.cxf.endpoint.Server;
import org.apache.cxf.interceptor.LoggingInInterceptor;
import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
import org.apache.cxf.transport.servlet.CXFServlet;
import org.nutz.dao.Dao;
import org.nutz.dao.impl.NutDao;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.context.embedded.EmbeddedServletContainerFactory;
import org.springframework.boot.context.embedded.ServletRegistrationBean;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.ImportResource;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider;
import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;
import com.mchange.v2.c3p0.ComboPooledDataSource;
import com.mchange.v2.c3p0.PooledDataSource;
//import com.newenv.communityFocus.mvc.controlls.ExampleEntryController;
import com.newenv.communityFocus.services.FileUploadService;
import com.newenv.communityFocus.services.GuestProfileService;
//import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;
//import org.springframework.web.servlet.config.annotation.EnableWebMvc;

@Configuration
@ImportResource({"classpath:META-INF/cxf/cxf.xml"})
//@EnableWebMvc
@ComponentScan
//@EnableAutoConfiguration
public class APPConfiguration {

	private static final Log logger = LogFactory.getLog(APPConfiguration.class);

	@Autowired
	private ApplicationContext ctx;
//	@Autowired
//	private TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory;
	

	@Value("${cxf.path:/services/*}")
	private String cxfPath;

	@Value("${cxf.log.requests:false}")
	private boolean logRequests;

	@Bean
	public ServletRegistrationBean cxfServletRegistrationBean() {
		return new ServletRegistrationBean(new CXFServlet(), cxfPath);
	}
	
//	@Bean
//	public ServletContextInitializer serveltContextInitializer(){
//		ServletContextInitializer sci = new ServletContextInitializer(){
//
//			@Override
//			public void onStartup(ServletContext servletContext) throws ServletException {
//				servletContext.setAttribute(Constants.MERGED_WEB_XML, getWebXmlasString());
//				
//			}
//			
//		};
//		return sci;
//	}
	
	
	
//	@Bean
//	public ServletContextInitializerConfiguration servletContextInitializerConfiguration(){
//		ServletContextInitializerConfiguration scic = new ServletContextInitializerConfiguration();
//		scic.
//		return scic;
//	}
	
//	@Bean 
//	public Tomcat tomcat(){
//		Tomcat tc = new Tomcat();
//		try {
//			Context cxt =tc.addWebapp("/communityFocus", "src/main/resources/META-INF/resources");
//			cxt.getServletContext().setAttribute(Globals.ALT_DD_ATTR, "src/main/resources/web.xml");
//			cxt.setAltDDName("srcxxx/main/resources/web.xml");
//		} catch (ServletException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		return tc;
//	}
	
//	@Bean
//	public EmbeddedServletContainerFactory embeddedServletContainerFactory() {
//		NewevnTomcatEmbeddedServletContainerFactory tecsf = new NewevnTomcatEmbeddedServletContainerFactory();
//		
//		return tecsf;
//	}
	
//	@Bean 
//	public EmbeddedServletContainer embeddedServletContainer(){
//		
//		return embeddedServletContainerFactory().getEmbeddedServletContainer(serveltContextInitializer());
//	}
	
//	@Bean(name="fedServlet")
//    public ServletRegistrationBean fedizServlet(ApplicationContext applicationContext) {
//				CommunityFocusServlet servlet = new CommunityFocusServlet();
//            	
//            return new ServletRegistrationBean(servlet, "/sec/fedservlet");
//    }
	
//	@Bean
//    public FilterRegistrationBean fedizFilter(ApplicationContext applicationContext) {
//            FederationFilter tf = new FederationFilter();
//          //  servlet.setApplicationContext(applicationContext);SpringUtils.getBean("servletRegistrationBean", ServletRegistrationBean.class)
//            	FilterRegistrationBean frb = new FilterRegistrationBean(tf,fedizServlet(applicationContext));
//            	frb.setFilter(tf);
//            return frb;
//    }


	
	
//	@Bean
//	@ConditionalOnMissingBean(name="resourceMapper")
//	public  Map<String,String> resourceMapper() {
//		//Map<String,String> resourcePaths = Collections.emptyMap();
//		Map<String,String> resourcePaths = new HashMap<String,String>();
//		resourcePaths.put(EntryPointEnum.EXAMPLE_FILE_UPLOAD.name(), "/jsp/fileUpload.jsp");
//		return  resourcePaths;
//	}

	@Bean
	public Server jaxRsServer() {
		// Find all beans annotated with @Path
		List<Object> serviceBeans = new ArrayList<Object>(ctx.getBeansWithAnnotation(Path.class).values());
		//serviceBeans.add(guestProfileService());
		serviceBeans.add(fileUploadService());
		logger.info("Registering service beans: " + serviceBeans);

		// Find all beans annotated with @Providers
		List<Object> providers = new ArrayList<Object>(ctx.getBeansWithAnnotation(Provider.class).values());
		providers.add(jsonProvider(objectMapper()));
		//providers.add(jspProvider(resourceMapper()));
		logger.info("Registering providers: " + providers);

		JAXRSServerFactoryBean factory = new JAXRSServerFactoryBean();
		factory.setBus(ctx.getBean(SpringBus.class));
		factory.setAddress("/");
		factory.setServiceBeans(serviceBeans);
		factory.setProviders(providers);
		Server server = factory.create();

		if (logRequests) {
			server.getEndpoint().getInInterceptors().add(new LoggingInInterceptor());
		}
		

		return server;
	}
	
//	 @Bean
//	    public ViewResolver getViewResolver() {
//	        InternalResourceViewResolver resolver = new InternalResourceViewResolver();
//	        resolver.setPrefix("/WEB-INF/jsp");
//	        resolver.setSuffix(".jsp");
//	        return resolver;
//	    }

	
//	@Bean
//	public Server entryMVCController() {
//		// Find all beans annotated with @Path
//		List<Object> serviceBeans = new ArrayList<Object>(ctx.getBeansWithAnnotation(Path.class).values());
//		serviceBeans.add(exampleEntryController());
//		logger.info("Registering service beans: " + serviceBeans);
//
//		// Find all beans annotated with @Providers
//		List<Object> providers = new ArrayList<Object>(ctx.getBeansWithAnnotation(Provider.class).values());
//		providers.add(jspProvider(resourceMapper()));
//		logger.info("Registering providers: " + providers);
//
//		JAXRSServerFactoryBean factory = new JAXRSServerFactoryBean();
//		factory.setBus(ctx.getBean(SpringBus.class));
//		factory.setAddress("/entryPoints");
//		factory.setServiceBeans(serviceBeans);
//		factory.setProviders(providers);
//		Server server = factory.create();
//
//		if (logRequests) {
//			server.getEndpoint().getInInterceptors().add(new LoggingInInterceptor());
//		}
//		
//
//		return server;
//	}
	

	@Bean
	@ConditionalOnMissingBean
	public JacksonJsonProvider jsonProvider(ObjectMapper objectMapper) {
		JacksonJaxbJsonProvider provider = new JacksonJaxbJsonProvider();
		provider.setMapper(objectMapper);
		return provider;
	}
	
//	@Bean
//	public String EXAMPLE_FILE_UPLOAD() {
//		
//		return "EXAMPLE_FILE_UPLOAD";
//	}
	
//	@Bean
//	@ConditionalOnMissingBean
//	public RequestDispatcherProvider jspProvider(Map<String,String> map) {
//		RequestDispatcherProvider provider = new RequestDispatcherProvider();
//		
//		provider.setEnumResources(convertMap(map));
//		return provider;
//	}

//	private Map<? extends Enum<?>, String> convertMap(Map<String, String> map) {
//		Map<EntryPointEnum,String> mp = new HashMap<EntryPointEnum, String>();
//		for( String key:map.keySet()){
//			if(EntryPointEnum.valueOf(key)!=null){
//				mp.put(EntryPointEnum.valueOf(key), map.get(key));
//			}
//		}
//		return mp;
//	}

	@Bean
	@ConditionalOnMissingBean
	public GuestProfileService guestProfileService() {
		return new GuestProfileService();
	}
	
	@Bean
	@ConditionalOnMissingBean
	public FileUploadService fileUploadService() {
		return new FileUploadService();
	}
	
//	@Bean
//	@ConditionalOnMissingBean
//	public ExampleEntryController exampleEntryController() {
//		return new ExampleEntryController();
//	}


	@Bean
	@ConditionalOnMissingBean
	public ObjectMapper objectMapper() {
		return new ObjectMapper();
	}
	
	
	
	@Bean(name="dataSource")
	public PooledDataSource dataSource() {
		ComboPooledDataSource cpds = new ComboPooledDataSource();
		cpds.setAcquireIncrement(3);
		cpds.setInitialPoolSize(1);
		cpds.setMinPoolSize(1);
		cpds.setMaxPoolSize(500);
		cpds.setMaxIdleTime(600);
		cpds.setIdleConnectionTestPeriod(500);
		try {
			cpds.setDriverClass("com.mysql.jdbc.Driver");
		} catch (PropertyVetoException e) {
			e.printStackTrace();
		}
		cpds.setJdbcUrl("jdbc:mysql://192.168.1.207:13306/bms?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull");
		cpds.setUser("root");
		cpds.setPassword("3.1415926");
		return cpds;
	}

	@Bean(name="dao")
	@ConditionalOnMissingBean
	public Dao dao(){
		NutDao nd = new NutDao(dataSource());
		return nd;
	}
	
}

