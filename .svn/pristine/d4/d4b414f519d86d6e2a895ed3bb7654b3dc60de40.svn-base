package com.newenv.communityFocus.services.refine;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.apache.log4j.Logger;
import org.nutz.dao.Cnd;
import org.nutz.dao.Dao;
import org.nutz.dao.entity.Record;
import org.nutz.json.Json;
import org.nutz.lang.util.NutMap;
import org.nutz.mapl.Mapl;
import org.nutz.trans.Trans;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.newenv.communityFocus.base.BaseService;
import com.newenv.communityFocus.dao.CommonDao;
import com.newenv.communityFocus.dao.DaoHelper;
import com.newenv.communityFocus.domain.RequestParameter;
import com.newenv.communityFocus.domain.jinggeng.Competition;
import com.newenv.communityFocus.domain.jinggeng.CustomerCommunicator;
import com.newenv.communityFocus.domain.jinggeng.CustomerInfo;
import com.newenv.communityFocus.domain.jinggeng.CustomerRequirement;
import com.newenv.communityFocus.domain.jinggeng.CustomerRequirementOfBuy;
import com.newenv.communityFocus.domain.jinggeng.CustomerRequirementOfRent;
import com.newenv.communityFocus.domain.jinggeng.HouseBasicInfo;
import com.newenv.communityFocus.domain.jinggeng.JjrCustomerParams;
import com.newenv.communityFocus.domain.jinggeng.PeriodInfo;
import com.newenv.communityFocus.domain.jinggeng.PersonInfo;
import com.newenv.communityFocus.domain.jinggeng.Relationship;
import com.newenv.communityFocus.domain.jinggeng.TelFollow;
import com.newenv.communityFocus.jinggeng.dao.TraceDao;
import com.newenv.communityFocus.security.services.SecurityUserHolder;


@Component
@Path("/refineService")
public class RefineManagerService extends BaseService {
	
	private Logger logger = Logger.getLogger(RefineManagerService.class);
	
	@Autowired
	private DaoHelper daoHelper;
	
	@Autowired
	private CommonDao commDao;
	
	
	
	@Autowired
	private TraceDao traceDao;
	
	
//	int deptid = 1;
//	int mdid = 1;
//	int jjrid = 1;
	
	public void init(int businessType, long fhid){
		//1.显示精耕异常的楼盘
			List<Record> lpList = null;

			Map fwList = daoHelper.getItem("SELECT * FROM lpjg_info where fhid="+fhid);
			super.setRequestAttribute("fw", fwList);
			super.setRequestAttribute("fang", daoHelper.getItem("SELECT * FROM xhj_lpfanghao where id="+fhid));
			Map<String,Object> fhMap = commDao.getFhxx(fhid);
			super.setRequestAttribute("jb", fhMap);
			
			List<Record> rl = commDao.getConstantsByName("权属性质");
			List<Record> yt = commDao.getConstantsByName("房屋用途");
			List<Record> dir = commDao.getConstantsByName("房屋朝向");
			List<Record> gtu = commDao.getConstantsByName("国土性质");
			super.setRequestAttribute("rl", rl);
			super.setRequestAttribute("yt", yt);
			super.setRequestAttribute("dir", dir);
			super.setRequestAttribute("gtu", gtu);
			
//			List<Record> fangyuan = traceDao.isWeiTuoFangyuan(String.valueOf(fhid));
//			Map zuMap = new HashMap();
//			Map shouMap = new HashMap();
//			for(Record r : fangyuan){
//				if(1 == r.getInt("type")){
//					zuMap = fangyuan.get(0);
//				}else if( 2 == r.getInt("type")){
//					shouMap = fangyuan.get(1);
//				}
//			}
//			super.setRequestAttribute("zufang", zuMap); 
//			super.setRequestAttribute("shoufang", shouMap); 
			super.setRequestAttribute("fangyuan",  traceDao.isWeiTuoFangyuan(String.valueOf(fhid))); 
			super.setRequestAttribute("businessType", businessType);
			if(businessType == 1){
//					lpList = daoHelper.getRecordList(" SELECT lp.id , lp.lp_name lpname ,p.mdid FROM  lpjg_assignment_loupan  p , xhj_lpxx lp "
//							+ " WHERE p.lpid = lp.id  AND mdid = (SELECT dept2_id FROM view_alldepartment  WHERE  dept1_id = 2828) ") ;
			}else{
				lpList = daoHelper.getRecordList(" SELECT distinct lp.id , lp.lp_name lpname  FROM  lpjg_precise_update_record  p , xhj_lpxx lp, xhj_lpdong d, xhj_lpdanyuan dy , xhj_lpfanghao f   " +
						" WHERE p.fhid = f.id AND f.dyid = dy.id AND dy.dzid = d.id AND d.lpid = lp.id  and p.creatorid= "+SecurityUserHolder.getUserId()) ;
			}
			super.setRequestAttribute("lpList", lpList);
	}
	

	@GET
	@Produces("text/html") 
	@Path("/mainPage/{type}/{fhid}")
	//businessType 1： 普通精耕,2: 异常批量精耕 
	public void mainPage(@PathParam("type") int businessType,@PathParam("fhid") long fhid) {
		init(businessType, fhid);
		super.setRequestAttribute("idx", -1);
		super.forwardTo("/pages/jinggeng/lpjg.jsp");
	}

	@GET
	@Produces("text/html")
	@Path("/mainPage/{type}/{fhid}/{idx}")
	//businessType 1： 普通精耕,2: 异常批量精耕 
	public void mainPage2(@PathParam("type") int businessType,@PathParam("fhid") long fhid,@PathParam("idx") long idx) {
		List<Map> fhList = daoHelper.getList(" SELECT p.fhid ,f.fanghao FROM  lpjg_precise_update_record  p , xhj_lpxx lp, xhj_lpdong d, xhj_lpdanyuan dy , xhj_lpfanghao f   " +
				" WHERE p.fhid = f.id AND f.dyid = dy.id AND dy.dzid = d.id AND d.lpid = lp.id  and p.creatorid= "+SecurityUserHolder.getUserId()) ;
		super.setRequestAttribute("fhList", fhList);
		
		if(fhList.size() > 0 && idx == 0){//第一次进来
			fhid = Long.parseLong(String.valueOf(fhList.get(0).get("fhid")));
		}
		init(businessType, fhid);
		super.setRequestAttribute("idx", idx);
		super.forwardTo("/pages/jinggeng/lpjg.jsp");
	}
	
	/**
	 * 查询房屋基本信息
	 * @param house
	 * @return
	 */
	@POST
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Path("/queryFwBasicInfo")
	public Response queryFenPai(HouseBasicInfo house) {
		List<HouseBasicInfo> list = new ArrayList<HouseBasicInfo>();
		try{
			list = daoHelper.getListByPOJO(HouseBasicInfo.class, null);
		}catch(Exception e){
			logger.error(e.getMessage());
		}
		return Response.ok().entity(list).build();
	}
	
	/**
	 * 保存房屋基本信息
	 * @param house
	 * @return
	 */
	@POST
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Path("/saveFwBasicInfo")
	public Response saveFwBasicInfo(HouseBasicInfo house) {
		List<Record> list = new ArrayList<Record>();
		try{
			HouseBasicInfo info = daoHelper.getObjectByPOJO(HouseBasicInfo.class, Cnd.where("fhid", "=", house.getFhid()));
			if(info == null){
				
				daoHelper.save(house);
				
			}else{
				house.setId(info.getId());
				daoHelper.update(house);
			}
			
			udpatePeriod(house.getFhid());
			
		}catch(Exception e){
			logger.error(e.getMessage());
			e.printStackTrace();
			return Response.status(500).build();
		}
		
//		接触    委托   了解需求  客户带看    合同洽谈

		return Response.ok().entity(list).build();
	}
	
	/**
	 * 更新更进信息
	 * @param fhid
	 */
	public void udpatePeriod(long fhid){
		PeriodInfo period = daoHelper.getObjectByPOJO(PeriodInfo.class, Cnd.where("fhid", "=", fhid).and("creatorid","=",SecurityUserHolder.getUserId()));
		if(period == null){
			PeriodInfo periodInfo = PeriodInfo.getPeriodInfo();
			periodInfo.setFhid(fhid);
			periodInfo.setStage("接触期");
			periodInfo.setMessages("");
			daoHelper.save(periodInfo);
		}else{
			
			period.setStage("接触期");
			daoHelper.update(period);
		}
	}
	
	/**
	 * 查询
	 * @param parameter
	 * @return
	 */
	@POST
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Path("/querySqManager")
	public Response querySqManager(RequestParameter parameter) {
		List<Record> list = new ArrayList<Record>();
		try{
			StringBuffer sql = new StringBuffer();
			sql.append("SELECT pr.fhid , p.name,mobilePhone, p.weXin,p.qq,p.email, ") ;
			sql.append(" ( SELECT  fullname FROM tbl_user_profile  u WHERE u.id= pr.creatorid ) jjrname, pr.modifydate ");
			sql.append(" FROM lpjg_precise_update_record pr ,lpjg_relationship  r, lpjg_personinfo  p ");
			sql.append(" WHERE  pr.fhid = r.fhid AND r.personid = p.id AND pr.mdid = " +  SecurityUserHolder.getDeptId());
			list = daoHelper.getRecordList(sql.toString());
		}catch(Exception e){
			logger.error(e.getMessage());
			return Response.status(500).build();
		}
		return Response.ok().entity(list).build();
	}
	
	
//	/**
//	 * 查询经济人业主信息
//	 * @param info
//	 * @return
//	 */
//	@POST
//	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
//	@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
//	@Path("/queryJjrManager")
//	public Response queryCustomerInfo(/*CustomerInfo info*/) {
//		List<CustomerInfo> list = new ArrayList<CustomerInfo>();
//		try{
//			Map customer = daoHelper.getItem("SELECT * FROM xhj_personinfo where id=3");
//			
//		}catch(Exception e){
//			logger.error(e.getMessage());
//			return Response.status(500).build();
//		}
//		return Response.ok().entity(list).build();
//	}
	
	
	/**
	 * @param info
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	@POST
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Path("/pageJump")
	public Response pageJump(RequestParameter params) {
		List<CustomerInfo> list = new ArrayList<CustomerInfo>();
		List dataList = new ArrayList();
		Map<String,Object> dataMap = new HashMap<String,Object>();
		try{
			if(params.getType() == 0){
				List lpList = daoHelper.getRecordList(" SELECT lp.id , lp.lp_name lpname  FROM  " +
						" lpjg_precise_update_record  p , xhj_lpxx lp, xhj_lpdong d, xhj_lpdanyuan dy , xhj_lpfanghao f   " +
						" WHERE p.fhid = f.id AND f.dyid = dy.id AND dy.dzid = d.id AND d.lpid = lp.id  ") ;
				Map fwList = daoHelper.getItem("SELECT * FROM lpjg_info where fhid="+params.getFhs());
				List rl =  commDao.getConstantsByName("权属性质");
				List yt = commDao.getConstantsByName("房屋用途"); 
				List dir =  commDao.getConstantsByName("房屋朝向");
				List gtu = commDao.getConstantsByName("国土性质");
				Map fhMap = commDao.getFhxx(Long.parseLong(params.getFhs()));
				
				dataMap.put("fw", fwList);
				dataMap.put("rl", rl);
				dataMap.put("yt", yt);
				dataMap.put("dir", dir);
				dataMap.put("gtu", gtu);
				dataMap.put("jb", fhMap);
				dataMap.put("lpList", lpList);
				
			}else if(params.getType() == 1){//shangquanjingli
				
			}else if(params.getType() == 2){//经纪人业主信息
				Map per = daoHelper.getItem("SELECT * FROM lpjg_personinfo where id=2 ");
				Map cus = daoHelper.getItem("SELECT * FROM lpjg_customerInfo where id=3 ");
				Map req = daoHelper.getItem("SELECT * FROM lpjg_customerrequirement where id=3 ");
				Map rent = daoHelper.getItem("SELECT * FROM lpjg_customerrequirementofrent where id=3 ");
				dataMap.put("per", per);
				dataMap.put("cus", cus);
				dataMap.put("req", req);
				
				List yt = commDao.getConstantsByName("房屋用途");
				List decor = commDao.getConstantsByName("装修情况");
				List weituo = commDao.getConstantsByName("委托来源");
				List jy = commDao.getConstantsByName("教育程度");
				List consum = commDao.getConstantsByName("消费观念");
				List workType = commDao.getConstantsByName("工作性质");
				List nationality = commDao.getConstantsByName("国籍");
				List furniture = commDao.getConstantsByName("家具");
				List dianqi = commDao.getConstantsByName("电器");
				List familar = commDao.getConstantsByName("小区熟悉程度");
				
				dataMap.put("yt", yt);
				dataMap.put("decor", decor);
				dataMap.put("weituo", weituo);
				dataMap.put("jy", jy);
				dataMap.put("consum", consum);
				dataMap.put("workType", workType);
				dataMap.put("nationality", nationality);
				dataMap.put("furniture", furniture);
				dataMap.put("dianqi", dianqi);
				dataMap.put("familar",familar);
				System.out.println("");
				
			}else if(params.getType() == 3){//电话更进
				
				List<Record> rl = daoHelper.getRecordList(" SELECT * FROM lpjg_tel_update_record  where fhid="+params.getFhs() +" and creatorid = "+ SecurityUserHolder.getUserId());
				return Response.ok().entity(rl).build();
				
			}else if(params.getType() == 4){//竞争对手更进
				
				Map map = daoHelper.getItem(" SELECT requires,price ,DATE_FORMAT(startdate,'%Y-%m-%d %h:%m:%s') startdate ,DATE_FORMAT(enddate,'%Y-%m-%d %h:%m:%s') enddate,company , remarks ,fhid  FROM lpjg_competitors  where fhid="+params.getFhs() +" and creatorid = "+ SecurityUserHolder.getUserId());
				return Response.ok().entity(map).build();
				
			}	
		}catch(Exception e){
			logger.error(e.getMessage());
			return Response.status(500).build();
		}
		return Response.ok().entity(dataMap).build();
	}
	
//	/**
//	 * 保存经济人客户信息
//	 * @param info
//	 * @return
//	 */
//	@POST
//	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
//	@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
//	@Path("/saveJjrYzManager")
//	public Response saveCustomerInfo(CustomerRequirement info) {
//		List<Record> list = new ArrayList<Record>();
//		try{
//			daoHelper.save(info);
//		}catch(Exception e){
//			logger.error(e.getMessage());
//			return Response.status(500).build();
//		}
//		return Response.ok().entity(list).build();
//	}
	
	/**
	 * 保存经济人客户信息2
	 * @param info
	 * @return
	 */
	/**
	 * @param info
	 * @return
	 */
	@POST
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Path("/saveJjrYzManager2")
	public Response saveCustomerInfo2(JjrCustomerParams info) {
		List<Record> list = new ArrayList<Record>();
		try{
			if(info.getType() == 1){//add
				//1.关系，//2.业主信息
				/**
				 * 
				 * 如果查不到关系表，直接新增关系表与业主表
				 * 如果关系表有数据，业主表有数据， 更新关系表personId字段   ---or---只需要更新业主表
				 * 如果关系表有数据，业主表无数据，新增业主表，更新关系表personId字段
				 * 
				 * person 为新记录的记录
				 */
				Relationship rel = daoHelper.getObjectByPOJO(Relationship.class, Cnd.where("fhid","=",info.getFhid()).and("userid","=",SecurityUserHolder.getUserId()));
				PersonInfo person= null;
				
				if(rel == null){
					//保存person
					person = (PersonInfo) daoHelper.saveReturn(info.getPersonInfo());
					
					//保存relation
					Relationship r = info.getRelationship();
					r.setPersonid(person.getId());
					r.setUserid(SecurityUserHolder.getUserId());
					r.setCreatedate(new java.util.Date());
					
					rel = (Relationship) daoHelper.saveReturn(r);
				}else{
					
					PersonInfo origPer =  daoHelper.getObjectByPOJO(PersonInfo.class, Cnd.where("id", "=", rel.getPersonid()));
					if(origPer == null){
						person = (PersonInfo) daoHelper.saveReturn(info.getPersonInfo());
						
					}else{
						person = info.getPersonInfo();
						person.setId(origPer.getId());
						daoHelper.update(person);
					}
					
					rel.setPersonid(person.getId());
					daoHelper.update(rel);
				}	

				
				//3.客户信息
				CustomerInfo origCus = daoHelper.getObjectByPOJO(CustomerInfo.class, Cnd.where("personid","=",person.getId()));
				CustomerInfo cus = null;
				cus = info.getCustomerInfo();
				if(origCus != null){
					cus.setId(origCus.getId());
					daoHelper.update(cus);
					
				}else{
					cus.setPersonid(person.getId());
					cus = (CustomerInfo) daoHelper.saveReturn(cus);
				}
				
				///4.客户需求
				CustomerRequirement origReq = daoHelper.getObjectByPOJO(CustomerRequirement.class, Cnd.where("customerid","=",cus.getId()));
				CustomerRequirement req = info.getCustomerReq();
				if(origReq != null ){
					req.setId(origReq.getId());
					daoHelper.update(req);
				}else{
					req.setCustomerID(cus.getId());
					daoHelper.save(req);
				}	
					
				//5租售信息
				if(2 == info.getCustomerInfo().getDelegateType()){
					CustomerRequirementOfRent rentInfo = info.getRentInfo();
					CustomerRequirementOfRent origRent = daoHelper.getObjectByPOJO(CustomerRequirementOfRent.class, Cnd.where("customerid","=",cus.getId()));

					if(origRent == null){
						rentInfo.setCustomerId(cus.getId());
						daoHelper.save(rentInfo);
					}else{
						rentInfo.setId(origRent.getId());
						daoHelper.update(rentInfo);
					}	
				}else if(1 == info.getCustomerInfo().getDelegateType()){
					CustomerRequirementOfBuy buyInfo = info.getBuyInfo();
					CustomerRequirementOfRent origBuy = daoHelper.getObjectByPOJO(CustomerRequirementOfRent.class, Cnd.where("customerid","=",cus.getId()));

					if(origBuy == null){
						buyInfo.setCustomerId(cus.getId());
						daoHelper.save(buyInfo);
					}else{
						buyInfo.setId(origBuy.getId());
						daoHelper.update(buyInfo);
					}	
				}
				//6联系方式
				CustomerCommunicator communicator = info.getCommunicator();	
					
				
				//7跟进情况
				PeriodInfo period = daoHelper.getObjectByPOJO(PeriodInfo.class, Cnd.where("fhid", "=", info.getFhid()).and("creatorid","=",SecurityUserHolder.getUserId()));
				if(period == null){
					PeriodInfo periodInfo = PeriodInfo.getPeriodInfo();
					periodInfo.setFhid(info.getFhid());
					periodInfo.setStage("接触期");
					periodInfo.setModifyDate(periodInfo.getCreateDate());
					periodInfo.setMessages("保存经纪人业主信息，房号："+info.getFhid());
					daoHelper.save(periodInfo);
				}else{
					period.setStage("接触期");
					period.setModifyDate(new java.util.Date());
					daoHelper.update(period);
				}
			}
			
			
//			Trans.begin();
//			Relationship relShip = daoHelper.getObjectByPOJO(Relationship.class, Cnd.where("fhid","=",info.getFhid()).and("userid","=",SecurityUserHolder.getUserId()));
//			if(relShip != null){
//				//????
//				PersonInfo per = info.getPersonInfo();
//				per.setId(relShip.getPersonid());
//				daoHelper.update(per);
//				
//				CustomerInfo origCus = daoHelper.getObjectByPOJO(CustomerInfo.class, Cnd.where("personid","=",per.getId()));
//				CustomerInfo cus = info.getCustomerInfo();
//				cus.setId(origCus.getId());
//				daoHelper.update(cus);
//				
//				CustomerRequirement req = info.getCustomerReq();
//				req.setCustomerID(origCus.getId());
//				daoHelper.update(req);
//				
//				//5租售信息
//				if(2 == info.getCustomerInfo().getDelegateType()){
//					CustomerRequirementOfRent rentInfo = info.getRentInfo();
//					rentInfo.setCustomerId(origCus.getId());
//					daoHelper.update(rentInfo);
//				}else if(1 == info.getCustomerInfo().getDelegateType()){
//					CustomerRequirementOfBuy buyInfo = info.getBuyInfo();
//					buyInfo.setCustomerId(origCus.getId());
//					daoHelper.update(buyInfo);
//				}
//				
//			}else{
//				//1.人员
//				PersonInfo person = (PersonInfo) daoHelper.saveReturn(info.getPersonInfo());
//				System.out.println(person);
//				
//				//2业主与房号关系
//				Relationship r = info.getRelationship();
//				r.setPersonid(person.getId());
//				r.setUserid(SecurityUserHolder.getUserId());
//				daoHelper.save(info.getRelationship());
//				
//				//3客户
//				CustomerInfo cus = info.getCustomerInfo();
//				cus.setPersonid(person.getId());
//				CustomerInfo cusRtn = (CustomerInfo) daoHelper.saveReturn(cus);
//				
//				//4需求
//				CustomerRequirement req = info.getCustomerReq();
//				req.setCustomerID(cusRtn.getId());
//				daoHelper.save(req);
//				
//				//5租售信息
//				if(2 == info.getCustomerInfo().getDelegateType()){
//					CustomerRequirementOfRent rentInfo = info.getRentInfo();
//					rentInfo.setCustomerId(cusRtn.getId());
//					daoHelper.save(rentInfo);
//				}else if(1 == info.getCustomerInfo().getDelegateType()){
//					CustomerRequirementOfBuy buyInfo = info.getBuyInfo();
//					buyInfo.setCustomerId(cusRtn.getId());
//					daoHelper.save(buyInfo);
//				}
//				
//				PeriodInfo period = daoHelper.getObjectByPOJO(PeriodInfo.class, Cnd.where("fhid", "=", info.getFhid()).and("creatorid","=",SecurityUserHolder.getUserId()));
//				if(period == null){
//					PeriodInfo periodInfo = PeriodInfo.getPeriodInfo();
//					periodInfo.setFhid(info.getFhid());
//					periodInfo.setStage("接触期");
//					periodInfo.setModifyDate(periodInfo.getCreateDate());
//					periodInfo.setMessages("保存经纪人业主信息，房号："+info.getFhid());
//					daoHelper.save(periodInfo);
//				}else{
//					
//					period.setStage("接触期");
//					period.setModifyDate(new java.util.Date());
//					daoHelper.update(period);
//				}
//				
//				//6联系方式
//				CustomerCommunicator communicator = info.getCommunicator();
//				
//			}
//			
//			Trans.close();
			
		}catch(Exception e){
			e.printStackTrace();
			logger.error(e.getMessage());
			return Response.status(500).build();
		}
		return Response.ok().entity(list).build();
	}
	
	
	/**
	 * 保存电话跟进
	 * @param info
	 * @return
	 */
	@POST
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Path("/saveTelInfo")
	public Response saveTelInfo(TelFollow info) {
		List<Record> list = new ArrayList<Record>();
		try{
			daoHelper.save(info);
			
			udpatePeriod(info.getFhid());
		}catch(Exception e){
			logger.error(e.getMessage());
			return Response.status(500).build();
		}
		return Response.ok().entity(list).build();
	}
	
	/**
	 * 保存竞争对手
	 * @param info
	 * @return
	 */
	@POST
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Path("/saveCompetition")
	public Response saveCompetition(Competition info) {
		List<Record> list = new ArrayList<Record>();
		try{
			daoHelper.save(info);
			
			udpatePeriod(info.getFhid());
		}catch(Exception e){
			logger.error(e.getMessage());
			return Response.status(500).build();
		}
		return Response.ok().entity(list).build();
	}
}
